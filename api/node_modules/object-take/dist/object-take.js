/*!
 * object-take v0.1.3
 * (c) 2018-present Vitor Luiz Cavalcanti <vitorluizc@outlook.com> (https://vitorluizc.github.io)
 * Released under the MIT License.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.objectTake = factory());
}(this, (function () { 'use strict';

    /**
     * Take value from object using a string for path expression or return
     * placeholder if value is undefined or unreachable.
     * @example ```js
     * take(object, 'data.users[0].contact.phones[0]');
     * take(values, '[3].toString()', '0');
     * ```
     * @param object
     * @param path - Path expression used to take value from object.
     * @param placeholder - Returned when value is undefined or unreachable.
     */
    var take = function (object, path, placeholder) {
      try {
        var expression = 'return o' + (path[0] !== '[' ? '.' + path : path);
        var value = new Function('o', expression)(object);
        return value === undefined ? placeholder : value;
      } catch (_) {
        return placeholder;
      }
    };

    return take;

})));
