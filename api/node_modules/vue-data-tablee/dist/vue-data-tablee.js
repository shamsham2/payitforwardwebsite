/*!
 * vue-data-tablee v0.13.0
 * (c) 2018-present Vitor Cavalcanti <vitorluizc@outlook.com> (https://vitorluizc.github.io)
 * Released under the MIT License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.vueDataTablee = factory());
}(this, (function () { 'use strict';

  /**
   * Check value's constructor name.
   * @param {*} value
   * @param {string} constructor
   * @returns {boolean}
   */
  var is = (function (value, constructor) {
    var is = Object.prototype.toString.call(value) === ("[object " + constructor + "]");
    return is;
  });

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var objectTake = createCommonjsModule(function (module, exports) {
  /*!
   * object-take v0.1.2
   * (c) 2018-present Vitor Luiz Cavalcanti <vitorluizc@outlook.com> (https://vitorluizc.github.io)
   * Released under the MIT License.
   */
  (function (global, factory) {
      module.exports = factory();
  }(commonjsGlobal, (function () {
      /**
       * Take value from object using a string for path expression or return
       * placeholder if value is undefined or unreachable.
       * @example ```js
       * take(object, 'data.users[0].contact.phones[0]');
       * take(values, '[3].toString()', '0');
       * ```
       * @param object
       * @param path - Path expression used to take value from object.
       * @param placeholder - Returned when value is undefined or unreachable.
       */
      var take = function (object, path, placeholder) {
        try {
          var expression = 'return o' + (path[0] !== '[' ? '.' + path : path);
          var value = new Function('o', expression)(object);
          return value === undefined ? placeholder : value;
        } catch (_) {
          return placeholder;
        }
      };

      return take;

  })));
  });

  var DEFAULT_VALIDATE = function (value) { return !is(value, 'Null'); };
  /**
   * Get value from first object.
   * @param {string} name
   * @param {Deep[]} objects
   * @param {function(*):boolean} [validate]
   * @returns {*}
   */


  var getProperty = function (name, objects, validate) {
    if ( validate === void 0 ) validate = DEFAULT_VALIDATE;

    var properties = objects.map(function (object) { return objectTake(object, name); });
    var property = properties.find(function (property) { return validate(property); });
    return property;
  };

  /**
   * Creates a validator function that checks is value is included in values.
   * @param {Array} values
   * @returns {function(*):boolean}
   */

  var includes = function (values) { return function (value) { return values.includes(value); }; };

  var ALIGNMENTS = ['right', 'left', 'center'];
  /**
   * Checks if value is an alignment.
   */

  var isAlignment = includes(ALIGNMENTS);
  /**
   * Checks if value is a list of objects.
   * @param {*} value
   * @returns {boolean}
   */

  var isContent = function (value) {
    var isObject = function (value) { return is(value, 'Object'); };

    var isContent = is(value, 'Array') && value.every(isObject);
    return isContent;
  };

  var Alignable = function (ref) {
    if ( ref === void 0 ) ref = {};
    var cols = ref.cols; if ( cols === void 0 ) cols = 'cols';

    return ({
    props: {
      /**
       * Default cell's alignment.
       */
      align: {
        type: String,
        default: 'left',
        validator: isAlignment
      }
    },
    methods: {
      /**
       * Get column's alignment.
       * @param {number} index
       * @returns {('right'|'left'|'center')}
       */
      $getAlignment: function $getAlignment(index) {
        var col = this[cols][index];
        var alignment = getProperty('align', [col, this._props], isAlignment);
        return alignment;
      }

    }
  });
  };

  var Selectable = function (ref) {
    if ( ref === void 0 ) ref = {};
    var rows = ref.rows; if ( rows === void 0 ) rows = 'rows';

    return ({
    props: {
      selectable: Boolean
    },

    data: function data() {
      return {
        selectedRows: [],
        lastClicked: undefined
      };
    },

    computed: {
      isSelectedAll: function isSelectedAll() {
        var this$1 = this;

        var isNotEmpty = !!this[rows].length;
        var isEqualsLength = isNotEmpty && this[rows].length === this.selectedRows.length;
        var isSelectedAll = isEqualsLength && this[rows].every(function (row) {
          return this$1.selectedRows.includes(row);
        });
        return isSelectedAll;
      }

    },
    watch: {
      rows: function rows() {
        this.selectedRows = [];
      }

    },
    methods: {
      /**
       * Check if a row is selected.
       * @param {object} row
       * @returns {boolean}
       */
      isSelected: function isSelected(row) {
        var isSelected = !!this.selectedRows.find(function (selected) { return selected === row; });
        return isSelected;
      },

      /**
       * Set row active.
       * @param {object} row
       * @param {object} event
       */
      select: function select(row, event) {
        if (event.shiftKey && this.lastClicked !== row) {
          this.multipleSelect(row);
        } else {
          this.selectedRows = this.isSelected(row) ? this.selectedRows.filter(function (selected) { return selected !== row; }) : this.selectedRows.concat( [row]);
        }

        this.lastClicked = row;
        this.emitSelected();
      },

      /**
       * Set multiple rows active.
       * @param {object} row
       */
      multipleSelect: function multipleSelect(row) {
        var s1 = this[rows].indexOf(row);
        var s2 = this[rows].indexOf(this.lastClicked);
        var ref = [s1, s2].sort();
        var start = ref[0];
        var end = ref[1];
        var range = Array(end - start + 1).fill().map(function (_, index) { return start + index; });
        this.selectedRows = this[rows].filter(function (_, index) { return range.includes(index); });
      },

      /**
       * Set all rows active.
       * @param {Event} event
       */
      selectAll: function selectAll(event) {
        this.selectedRows = this.isSelectedAll ? [] : [].concat( this[rows] );
        this.emitSelected();
      },

      /**
       * Emit selected rows.
       */
      emitSelected: function emitSelected() {
        this.$emit('select', this.selectedRows);
      }

    }
  });
  };

  /**
   * Default sort function.
   * @param {(string|number)} a
   * @param {(string|number)} b
   * @returns {number}
   */

  var DEFAULT_SORT = function (a, b) {
    if ( a === void 0 ) a = '';
    if ( b === void 0 ) b = '';

    var isNumbers = is(a, 'Number') && is(b, 'Number');

    if (isNumbers) {
      return a - b;
    } else {
      return String(a || '').localeCompare(String(b || ''));
    }
  };

  var Sortable = function (ref) {
    if ( ref === void 0 ) ref = {};
    var cols = ref.cols; if ( cols === void 0 ) cols = 'cols';
    var rows = ref.rows; if ( rows === void 0 ) rows = 'rows';

    return ({
    props: {
      /**
       * Defines if it sort and optionally define's default sort function.
       */
      sort: {
        type: [Boolean, Function],
        default: true
      },

      /**
       * Defines if sort just emit events.
       */
      sortExternal: Boolean
    },

    data: function data() {
      return {
        sorter: null,
        sortment: 'ascending'
      };
    },

    computed: {
      $sortedRows: function $sortedRows() {
        var this$1 = this;

        var isSorted = is(this.sorter, 'Number');

        if (!isSorted || this.sortExternal) {
          return [].concat( this[rows] );
        }

        var sorted = [].concat( this[rows] ).sort(function (a, b) { return this$1.$sort(a, b); });
        return sorted;
      }

    },
    methods: {
      /**
       * Check if column is sorting.
       * @param {number} index
       * @returns {boolean}
       */
      $isSorting: function $isSorting(index) {
        var isSorting = this.sorter === index;
        return isSorting;
      },

      /**
       * Check if a column is sortable.
       * @param {number} index
       * @returns {boolean}
       */
      $isSortable: function $isSortable(index) {
        var isSortable = !!this.$getSort(index);
        return isSortable;
      },

      /**
       * Get column's sort setting.
       * @param {number} index
       * @returns {(boolean|function)}
       */
      $getSort: function $getSort(index) {
        var col = this[cols][index];
        var sort = getProperty('sort', [col, this._props]);
        return sort;
      },

      /**
       * Get column sort classes.
       * @param {number} index
       * @returns {(string|Array.<string, boolean>)[]}
       */
      $getSortClasses: function $getSortClasses(index) {
        var isSortable = this.$isSortable(index);
        var isSorting = this.$isSorting(index);
        var classes = {
          '-sorting': isSorting,
          '-sortable': isSortable,
          '-unsortable': !isSortable
        };
        classes['-' + this.sortment] = isSorting;
        return classes;
      },

      /**
       * Get column arrow's.
       * @param {number} index
       * @returns {('▼'|'▲'|'')}
       */
      $getArrow: function $getArrow(index) {
        var isSorting = this.$isSorting(index);
        if (!isSorting) { return '▲'; }
        var arrow = this.sortment === 'ascending' ? '▲' : '▼';
        return arrow;
      },

      /**
       * Sort a column or change its sortment.
       * @param {number} index
       */
      $setSorter: function $setSorter(index) {
        var isSorter = this.$isSorting(index);
        var isSortable = this.$isSortable(index);

        if (!isSortable) {
          return;
        }

        var column = this[cols][index];
        var sortment = !isSorter || this.sortment === 'descending' ? 'ascending' : 'descending';
        this.sortment = sortment;
        this.sorter = index;
        this.$emit('sort', {
          column: column,
          sortment: sortment
        });
      },

      /**
       * Returns diference between values.
       * This is the sort function.
       * @param {object} rowA
       * @param {object} rowB
       * @returns {number}
       */
      $sort: function $sort(rowA, rowB) {
        var custom = this.$getSort(this.sorter);
        var sort = is(custom, 'Function') ? custom : DEFAULT_SORT;
        var path = this[cols][this.sorter].field;
        var number = sort(objectTake(rowA, path), objectTake(rowB, path));
        var result = number * (this.sortment === 'ascending' ? 1 : -1);
        return result;
      }

    }
  });
  };

  //
  var script = {
    mixins: [Sortable(), Alignable(), Selectable()],
    props: {
      /**
       * List of col's data.
       */
      cols: {
        type: Array,
        required: true,
        validator: isContent
      },

      /**
       * List of row's data.
       */
      rows: {
        type: Array,
        required: true,
        validator: isContent
      },

      /**
       * Empty cell's character.
       */
      empty: {
        type: String,
        default: ''
      }
    },

    data: function data() {
      return {
        classy: this.$options.name || 'data-tablee'
      };
    },

    methods: {
      /**
       * Get cell's classes.
       * @param {number} index
       * @param {('header'|'content')} type
       * @returns {(string|Object.<string, boolean>)[]}
       */
      getClasses: function getClasses(index, type) {
        var custom = this.cols[index][type + 'Class'];
        var classes = [custom, '-' + type, this.classy + '-cell', this.$getSortClasses(index), '-' + this.$getAlignment(index)];
        return classes;
      },

      /**
       * Get cell's styles.
       * @param {{ hidden: boolean, align: align }} col
       * @returns {CSSStyleDeclaration}
       */
      getStyle: function getStyle(col) {
        var style = {
          textAlign: col.align || this.align,
          display: col.hidden ? 'none' : undefined
        };
        return style;
      },

      /**
       * Get value's label.
       * @param {*} value
       * @param {string} path
       * @returns {string}
       */
      getText: objectTake
    },

    /**
     * Install DataTablee components.
     * @param {Vue} Vue
     * @param {{ name: string }} [options]
     */
    install: function install(Vue, ref) {
      if ( ref === void 0 ) ref = {};
      var name = ref.name; if ( name === void 0 ) name = 'data-tablee';

      Vue.component(name, this);
    }

  };

  /* script */
              var __vue_script__ = script;
  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "table",
      { class: _vm.classy },
      [
        _c(
          "tr",
          { class: [_vm.classy + "-row", "-header"] },
          [
            _vm.selectable
              ? _c(
                  "th",
                  { class: [_vm.classy + "-cell", "-header", "-clickable"] },
                  [
                    _c("input", {
                      class: [_vm.classy + "-select", "-all"],
                      attrs: { type: "checkbox" },
                      domProps: { checked: _vm.isSelectedAll },
                      on: {
                        click: function($event) {
                          $event.preventDefault();
                          return _vm.selectAll($event)
                        }
                      }
                    })
                  ]
                )
              : _vm._e(),
            _vm._v(" "),
            _vm._l(_vm.cols, function(col, index) {
              return _c(
                "th",
                {
                  key: index,
                  class: _vm.getClasses(index, "header"),
                  style: _vm.getStyle(col),
                  attrs: { width: col.width || null },
                  on: {
                    click: function($event) {
                      _vm.$setSorter(index);
                    }
                  }
                },
                [
                  _c("span", { class: _vm.classy + "-text" }, [
                    _vm._v(_vm._s(_vm.getText(col, "label") || _vm.empty))
                  ]),
                  _vm._v(" "),
                  _vm._t(
                    "sort-icon",
                    [
                      _c("span", { class: _vm.classy + "-icon" }, [
                        _vm._v(_vm._s(_vm.$getArrow(index)))
                      ])
                    ],
                    {
                      sortment: _vm.sortment,
                      sorted: _vm.$isSorting(index),
                      arrow: _vm.$getArrow(index)
                    }
                  )
                ],
                2
              )
            })
          ],
          2
        ),
        _vm._v(" "),
        _vm._l(_vm.$sortedRows, function(row, rowIndex) {
          return _c(
            "tr",
            { key: rowIndex, class: [_vm.classy + "-row", "-content"] },
            [
              _vm.selectable
                ? _c(
                    "th",
                    {
                      class: [_vm.classy + "-cell", "-content", "-clickable"],
                      on: {
                        click: function($event) {
                          $event.preventDefault();
                          _vm.select(row, $event);
                        }
                      }
                    },
                    [
                      _c("input", {
                        class: [_vm.classy + "-select", "-all"],
                        attrs: { type: "checkbox" },
                        domProps: { checked: _vm.isSelected(row) }
                      })
                    ]
                  )
                : _vm._e(),
              _vm._v(" "),
              _vm._t(
                "row",
                _vm._l(_vm.cols, function(col, colIndex) {
                  return _c(
                    "td",
                    {
                      key: colIndex,
                      class: _vm.getClasses(colIndex, "content"),
                      style: _vm.getStyle(col),
                      attrs: { width: col.width || null }
                    },
                    [
                      _c("span", { class: _vm.classy + "-text" }, [
                        _vm._v(_vm._s(_vm.getText(row, col.field) || _vm.empty))
                      ])
                    ]
                  )
                }),
                { row: row, index: rowIndex }
              )
            ],
            2
          )
        })
      ],
      2
    )
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    var __vue_inject_styles__ = undefined;
    /* scoped */
    var __vue_scope_id__ = undefined;
    /* module identifier */
    var __vue_module_identifier__ = undefined;
    /* functional template */
    var __vue_is_functional_template__ = false;
    /* component normalizer */
    function __vue_normalize__(
      template, style, script$$1,
      scope, functional, moduleIdentifier,
      createInjector, createInjectorSSR
    ) {
      var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};

      {
        component.__file = "/Users/vitorcavalcanti/Projects/vue-data-tablee/src/DataTable.vue";
      }

      if (!component.render) {
        component.render = template.render;
        component.staticRenderFns = template.staticRenderFns;
        component._compiled = true;

        if (functional) { component.functional = true; }
      }

      component._scopeId = scope;

      

      return component
    }
    /* style inject */
    function __vue_create_injector__() {
      var head = document.head || document.getElementsByTagName('head')[0];
      var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
      var isOldIE =
        typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

      return function addStyle(id, css) {
        if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

        var group = isOldIE ? css.media || 'default' : id;
        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

        if (!style.ids.includes(id)) {
          var code = css.source;
          var index = style.ids.length;

          style.ids.push(id);

          if (isOldIE) {
            style.element = style.element || document.querySelector('style[data-group=' + group + ']');
          }

          if (!style.element) {
            var el = style.element = document.createElement('style');
            el.type = 'text/css';

            if (css.media) { el.setAttribute('media', css.media); }
            if (isOldIE) {
              el.setAttribute('data-group', group);
              el.setAttribute('data-next-index', '0');
            }

            head.appendChild(el);
          }

          if (isOldIE) {
            index = parseInt(style.element.getAttribute('data-next-index'));
            style.element.setAttribute('data-next-index', index + 1);
          }

          if (style.element.styleSheet) {
            style.parts.push(code);
            style.element.styleSheet.cssText = style.parts
              .filter(Boolean)
              .join('\n');
          } else {
            var textNode = document.createTextNode(code);
            var nodes = style.element.childNodes;
            if (nodes[index]) { style.element.removeChild(nodes[index]); }
            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
            else { style.element.appendChild(textNode); }
          }
        }
      }
    }
    /* style inject SSR */
    

    
    var DataTable = __vue_normalize__(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      __vue_create_injector__,
      undefined
    )

  return DataTable;

})));
